using Spectre.Console;

namespace ETLFramework.Playground.Services;

/// <summary>
/// Service for providing help and documentation within the playground.
/// </summary>
public interface IHelpService
{
    /// <summary>
    /// Displays the main help menu.
    /// </summary>
    void ShowMainHelp();

    /// <summary>
    /// Displays help for a specific playground module.
    /// </summary>
    /// <param name="moduleName">The name of the module</param>
    void ShowModuleHelp(string moduleName);

    /// <summary>
    /// Displays getting started guide.
    /// </summary>
    void ShowGettingStarted();

    /// <summary>
    /// Displays keyboard shortcuts and navigation help.
    /// </summary>
    void ShowKeyboardShortcuts();
}

/// <summary>
/// Implementation of the help service.
/// </summary>
public class HelpService : IHelpService
{
    /// <inheritdoc />
    public void ShowMainHelp()
    {
        var panel = new Panel(
            new Markup("""
            [bold blue]ETL Framework Playground Help[/]
            
            [yellow]Available Modules:[/]
            ‚Ä¢ [green]üîå Connector Playground[/] - Test data connectors (CSV, JSON, XML, databases)
            ‚Ä¢ [green]üîß Transformation Playground[/] - Test data transformations and field mappings
            ‚Ä¢ [green]‚öôÔ∏è Pipeline Playground[/] - Build and test complete ETL pipelines
            ‚Ä¢ [green]‚úÖ Validation Playground[/] - Test data validation rules and quality checks
            ‚Ä¢ [green]üéØ Rule Engine Playground[/] - Test rule-based processing and business logic
            ‚Ä¢ [green]‚ö° Performance Playground[/] - Benchmark performance and analyze bottlenecks
            
            [yellow]Navigation:[/]
            ‚Ä¢ Use [cyan]arrow keys[/] to navigate menus
            ‚Ä¢ Press [cyan]Enter[/] to select an option
            ‚Ä¢ Press [cyan]Escape[/] or select "Back" to return to previous menu
            ‚Ä¢ Press [cyan]Ctrl+C[/] to exit the application
            
            [yellow]Getting Help:[/]
            ‚Ä¢ Select [cyan]"üìö Help & Documentation"[/] from the main menu
            ‚Ä¢ Each module has built-in help and examples
            ‚Ä¢ Check the README.md file for detailed documentation
            """))
        {
            Header = new PanelHeader(" üìö ETL Framework Playground Help "),
            Border = BoxBorder.Rounded,
            BorderStyle = new Style(Color.Blue)
        };

        AnsiConsole.Write(panel);
    }

    /// <inheritdoc />
    public void ShowModuleHelp(string moduleName)
    {
        var helpContent = moduleName.ToLower() switch
        {
            "connector" => GetConnectorHelp(),
            "transformation" => GetTransformationHelp(),
            "pipeline" => GetPipelineHelp(),
            "validation" => GetValidationHelp(),
            "ruleengine" => GetRuleEngineHelp(),
            "performance" => GetPerformanceHelp(),
            _ => "[red]Help not available for this module.[/]"
        };

        var panel = new Panel(new Markup(helpContent))
        {
            Header = new PanelHeader($" üìñ {moduleName} Module Help "),
            Border = BoxBorder.Rounded,
            BorderStyle = new Style(Color.Green)
        };

        AnsiConsole.Write(panel);
    }

    /// <inheritdoc />
    public void ShowGettingStarted()
    {
        var panel = new Panel(
            new Markup("""
            [bold green]Getting Started with ETL Framework Playground[/]
            
            [yellow]1. Choose a Module[/]
            Start by selecting one of the playground modules from the main menu.
            Each module focuses on a specific aspect of ETL processing.
            
            [yellow]2. Explore Sample Scenarios[/]
            Each module provides pre-built scenarios with sample data.
            These demonstrate common use cases and best practices.
            
            [yellow]3. Experiment with Settings[/]
            Try different configurations, data sizes, and parameters
            to see how they affect performance and results.
            
            [yellow]4. Learn from Examples[/]
            Pay attention to the code examples and explanations
            provided throughout the playground.
            
            [yellow]5. Apply to Your Projects[/]
            Use the knowledge gained to implement ETL solutions
            in your own applications.
            
            [cyan]üí° Tip:[/] Start with the Connector Playground to understand
            how data flows through the ETL Framework.
            """))
        {
            Header = new PanelHeader(" üöÄ Getting Started "),
            Border = BoxBorder.Rounded,
            BorderStyle = new Style(Color.Green)
        };

        AnsiConsole.Write(panel);
    }

    /// <inheritdoc />
    public void ShowKeyboardShortcuts()
    {
        var table = new Table()
            .Title("[bold blue]Keyboard Shortcuts[/]")
            .BorderColor(Color.Blue)
            .AddColumn("Key")
            .AddColumn("Action")
            .AddRow("[cyan]‚Üë/‚Üì[/]", "Navigate menu items")
            .AddRow("[cyan]Enter[/]", "Select menu item")
            .AddRow("[cyan]Escape[/]", "Go back to previous menu")
            .AddRow("[cyan]Ctrl+C[/]", "Exit application")
            .AddRow("[cyan]Space[/]", "Continue after viewing results")
            .AddRow("[cyan]Tab[/]", "Navigate between UI elements")
            .AddRow("[cyan]F1[/]", "Show help (when available)")
            .AddRow("[cyan]F5[/]", "Refresh/reload current view");

        AnsiConsole.Write(table);
    }

    private static string GetConnectorHelp()
    {
        return """
        [bold blue]Connector Playground Help[/]
        
        [yellow]Purpose:[/] Test and explore different data connectors
        
        [yellow]Available Connectors:[/]
        ‚Ä¢ [green]CSV[/] - Comma-separated values files
        ‚Ä¢ [green]JSON[/] - JavaScript Object Notation files
        ‚Ä¢ [green]XML[/] - Extensible Markup Language files
        ‚Ä¢ [green]SQLite[/] - Lightweight database files
        ‚Ä¢ [green]SQL Server[/] - Microsoft SQL Server databases
        ‚Ä¢ [green]MySQL[/] - MySQL databases
        ‚Ä¢ [green]Azure Blob[/] - Azure Blob Storage
        ‚Ä¢ [green]AWS S3[/] - Amazon S3 Storage
        
        [yellow]Features:[/]
        ‚Ä¢ Test read/write operations
        ‚Ä¢ Performance benchmarking
        ‚Ä¢ Configuration validation
        ‚Ä¢ Health checks
        ‚Ä¢ Custom connector setup
        
        [cyan]üí° Tip:[/] Start with file-based connectors (CSV, JSON)
        before moving to database connectors.
        """;
    }

    private static string GetTransformationHelp()
    {
        return """
        [bold blue]Transformation Playground Help[/]
        
        [yellow]Purpose:[/] Test data transformation operations
        
        [yellow]Transformation Types:[/]
        ‚Ä¢ [green]String[/] - Text manipulation (uppercase, lowercase, trim, regex)
        ‚Ä¢ [green]Numeric[/] - Number operations (round, add, multiply, format)
        ‚Ä¢ [green]Date/Time[/] - Date manipulation and formatting
        ‚Ä¢ [green]Field Mapping[/] - Rename and restructure fields
        ‚Ä¢ [green]Complex[/] - Multi-step transformations
        ‚Ä¢ [green]Custom[/] - Build your own transformation logic
        
        [yellow]Features:[/]
        ‚Ä¢ Interactive transformation testing
        ‚Ä¢ Before/after data comparison
        ‚Ä¢ Performance measurement
        ‚Ä¢ Transformation chaining
        ‚Ä¢ Error handling
        
        [cyan]üí° Tip:[/] Use the "Test All" options to see
        multiple transformations applied to the same data.
        """;
    }

    private static string GetPipelineHelp()
    {
        return """
        [bold blue]Pipeline Playground Help[/]
        
        [yellow]Purpose:[/] Build and test complete ETL pipelines
        
        [yellow]Pipeline Types:[/]
        ‚Ä¢ [green]Simple ETL[/] - Basic Extract ‚Üí Transform ‚Üí Load
        ‚Ä¢ [green]Multi-Stage[/] - Complex pipelines with multiple stages
        ‚Ä¢ [green]Data Quality[/] - Focus on validation and quality checks
        ‚Ä¢ [green]Performance[/] - High-throughput optimized pipelines
        ‚Ä¢ [green]Custom[/] - Interactive pipeline builder
        ‚Ä¢ [green]Monitoring[/] - Real-time execution monitoring
        
        [yellow]Features:[/]
        ‚Ä¢ Visual pipeline execution
        ‚Ä¢ Stage-by-stage monitoring
        ‚Ä¢ Error handling and recovery
        ‚Ä¢ Performance metrics
        ‚Ä¢ Configuration export
        
        [cyan]üí° Tip:[/] Start with Simple ETL to understand
        the basic pipeline flow.
        """;
    }

    private static string GetValidationHelp()
    {
        return """
        [bold blue]Validation Playground Help[/]
        
        [yellow]Purpose:[/] Test data validation rules and quality checks
        
        [yellow]Validation Types:[/]
        ‚Ä¢ [green]Required Fields[/] - Check for missing data
        ‚Ä¢ [green]Regex Patterns[/] - Pattern matching validation
        ‚Ä¢ [green]Range Validation[/] - Numeric and date ranges
        ‚Ä¢ [green]Email Validation[/] - Email format checking
        ‚Ä¢ [green]Phone Validation[/] - Phone number formats
        ‚Ä¢ [green]Data Type[/] - Type checking and conversion
        ‚Ä¢ [green]Custom Rules[/] - Business logic validation
        ‚Ä¢ [green]Quality Reports[/] - Comprehensive analysis
        
        [yellow]Features:[/]
        ‚Ä¢ Interactive rule testing
        ‚Ä¢ Validation result visualization
        ‚Ä¢ Error reporting
        ‚Ä¢ Quality scoring
        ‚Ä¢ Rule configuration
        
        [cyan]üí° Tip:[/] Start with Required Field validation
        to understand basic validation concepts.
        """;
    }

    private static string GetRuleEngineHelp()
    {
        return """
        [bold blue]Rule Engine Playground Help[/]
        
        [yellow]Purpose:[/] Test rule-based processing and business logic
        
        [yellow]Rule Types:[/]
        ‚Ä¢ [green]Conditional[/] - Simple if-then logic
        ‚Ä¢ [green]Priority-Based[/] - Rules with execution order
        ‚Ä¢ [green]Business Logic[/] - Complex business rules
        ‚Ä¢ [green]Chained[/] - Sequential rule processing
        ‚Ä¢ [green]Matching[/] - Pattern-based rule selection
        ‚Ä¢ [green]Configuration[/] - Interactive rule builder
        
        [yellow]Features:[/]
        ‚Ä¢ Rule condition testing
        ‚Ä¢ Priority ordering
        ‚Ä¢ Rule conflict resolution
        ‚Ä¢ Performance optimization
        ‚Ä¢ Visual rule builder
        
        [cyan]üí° Tip:[/] Start with Simple Conditional rules
        to understand basic rule concepts.
        """;
    }

    private static string GetPerformanceHelp()
    {
        return """
        [bold blue]Performance Playground Help[/]
        
        [yellow]Purpose:[/] Benchmark performance and analyze bottlenecks
        
        [yellow]Test Types:[/]
        ‚Ä¢ [green]Throughput[/] - Records processed per second
        ‚Ä¢ [green]Memory Usage[/] - Memory consumption analysis
        ‚Ä¢ [green]Latency[/] - Response time measurement
        ‚Ä¢ [green]Batch Size[/] - Optimal batch size finding
        ‚Ä¢ [green]Parallel Processing[/] - Multi-threading tests
        ‚Ä¢ [green]Profiling[/] - Detailed performance analysis
        
        [yellow]Features:[/]
        ‚Ä¢ Real-time performance metrics
        ‚Ä¢ Memory usage tracking
        ‚Ä¢ Bottleneck identification
        ‚Ä¢ Optimization recommendations
        ‚Ä¢ Comparative analysis
        
        [cyan]üí° Tip:[/] Start with Throughput benchmarks
        to establish baseline performance.
        """;
    }
}
